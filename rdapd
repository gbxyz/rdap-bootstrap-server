#!/usr/bin/env php
<?php declare(strict_types=1);

error_reporting(E_ALL);

ini_set('display_startup_errors',   false);
ini_set('display_errors',           'off');
ini_set('log_errors',               true);
ini_set('error_log',                '/dev/stderr');
ini_set('memory_limit',             -1);
ini_set('max_execution_time',       0);

require __DIR__.'/RDAP/Server.php';
require __DIR__.'/RDAP/RootServer.php';

use OpenSwoole\Constant;

enum serverType {
    case root;      // serves root.rdap.org and registrars.rdap.org
    case default;   // boostrap mode, serves rdap.org
}

if (realpath(__FILE__) == realpath(array_shift($argv))) {
    rdapd::main($argv);
}

final class rdapd {

    const SSL_PROTOCOLS = Constant::SSL_TLSv1_3 | Constant::SSL_TLSv1_2;

    const SSL_CIPHERS = [
        'ECDHE-ECDSA-AES128-GCM-SHA256',
        'ECDHE-RSA-AES128-GCM-SHA256',
        'ECDHE-ECDSA-AES256-GCM-SHA384',
        'ECDHE-RSA-AES256-GCM-SHA384',
        'ECDHE-ECDSA-CHACHA20-POLY1305',
        'ECDHE-RSA-CHACHA20-POLY1305',
        'DHE-RSA-AES128-GCM-SHA256',
        'DHE-RSA-AES256-GCM-SHA384',
        'DHE-RSA-CHACHA20-POLY1305'
    ];

    /**
     * @param string[] $argv
     */
    public static function main(array $argv) : void {
        $opt = getopt('', [
            'help',
            'addr:',
            'port:',
            'tls',
            'root',
        ]);

        if (array_key_exists('help', $opt)) self::help();

        $tls = array_key_exists('tls', $opt);
        self::start(
            addr:   $opt['addr'] ?? '::',
            port:   intval($opt['port'] ?? ($tls ? 443 : 8080)),
            tls:    $tls,
            type:   (array_key_exists('root', $opt) ? serverType::root : serverType::default),
        );
    }

    private static function start(string $addr, int $port, bool $tls, serverType $type=serverType::default) : void {

        $ns = '\\RDAP';
        $class = match($type) {
            serverType::root    => "{$ns}\\RootServer",
            default             => "{$ns}\\Server",
        };

        $server = new $class(
            host:       $addr,
            port:       $port,
            sock_type:  ($tls ? Constant::SOCK_TCP | Constant::SSL : Constant::SOCK_TCP),
        );

        if ($tls) {
            $file = sys_get_temp_dir().'/server.pem';

            $fh = fopen($file, 'w');

            if (false === $fh) {
                $e = (object)error_get_last();
                fprintf(STDERR, "Unable to open %s for writing: %s\n", $file, $e->message);
                exit(1);
            }

            chmod($file, 0400);

            fwrite($fh, getenv('TLS_KEY')."\n".getenv('TLS_CERT')."\n");

            fclose($fh);

            $server->set([
                'ssl_protocols' => self::SSL_PROTOCOLS,
                'ssl_ciphers'   => implode(':', self::SSL_CIPHERS),
                'ssl_key_file'  => $file,
                'ssl_cert_file' => $file,
            ]);
        }

        $server->on('Start', function() use ($server) {
            foreach ($server->ports as $port) {
                fprintf(STDERR, "now listening on [%s]:%u\n", $port->host, $port->port);
            }
        });

        $server->start();
    }

    private static function help() : void {
        $file = __FILE__;
        echo <<<END
Usage: {$file} [OPTIONS]

  --help        show this help
  --tls         enable TLS
  --addr=ADDR   specify IP address (default: ::)
  --port=PORT   specify TCP port (default: 443 when TLS is enabled,
                8080 otherwise)
  --root        run the root.rdap.org/registrars.rdap.org server,
                instead of a bootstrap server

If the --tls argument is provided, the key and certificate will be read
from the TLS_KEY and TLS_CERT environment variables.

END;
        exit(0);
    }

    // disallow object instantation
    private function __construct() {
    }
}
